module(function (_) {

  _.imports('backbone').as('Backbone');
  _.imports('Base', 'mixins').from('..core.base');

  // ResponseState
  // -------------
  // ResponseState is set every time a request is made. It handles meta messages,
  // error codes, etc. generated by the JSON api.
  _.ResponseState = _.Base.extend({

    constructor: function () {
      var self = this;
      this.error = false;
      this.success = false;
      // Handle HTTP or Server errors.
      this.listenTo(_.Backbone, 'AJAX:error', function (xhr, textStatus, thrownError) {
        self.set({
          error: {
            status: textStatus,
            message: "An AJAX request failed: " + (thrownError)? thrownError.message : textStatus
          }
        });
      });
    },

    // Clear out the current state.
    reset: function () {
      this.error = false;
      this.success = false;
    },

    // Set the response using JSON metadata.
    //
    //    // JSON response looks like:
    //    "meta": {
    //      "error" : { // or "success", if all is well.
    //        "message": "stuff",
    //        "items": []
    //      }
    //    }
    //
    set: function (meta) {
      this.reset();
      this.error = meta.error || false;
      this.success = meta.success || false;
    },

    // Check if error was set:
    hasError: function () {
      return !!this.error;
    },

    getError: function () {
      return this.error || {};
    },

    // Check if error was set:
    hasSuccess: function () {
      return !!this.success;
    },

    getSuccess: function () {
      return this.success || {};
    }

  });

  _.ResponseState.mixin(
    _.Backbone.Events
  );

  _.ResponseState.mixinStatic(
    _.mixins.singleton
  );

})